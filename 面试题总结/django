./manage.py runserver 项目名 ip

./manage.py startapp 子项目名
将子项目名加入到setting下方便全局使用

路由在mysite.urls里面,可导入其他路由文件如子项目中的views



可以用app自己维护自己的url
from django.conf.urls import url,include
from django.contrib import admin
url(r'^book/',include('bookapp.urls'))
然后重新配置自己的url




渲染页面的四种方法
1.html = '<html><body><h1>It is time %s</h1></body></html>'%now
 return HttpResponse(html)
2.t = loader.get_template('datetime.html')
  html = t.render({'date':now})
  return HttpResponse(html)
3. return render_to_response('datetime.html',{'date':now})

4.return render(request,'datetime.html',{'date':now})


自定义过滤器：
在app中新建名为templatetags文件夹
在下面新建一个__init__.py文件跟自定义文件
在自定义文件中自定义过滤器
在模板中应用时先用{% load ...%}


extend 导入文件 {%extend '文件'%}{%block ...%}{%endblock%}
include 引入文件 {%include '文件'%}
url 的第四个参数 url(r'^about/$','index',{'a':1,'b':'2'},name = 'haha')
<a href= '{%url 'haha'%}'>..</a>
静态文件 static文件夹
要想将静态文件全局使用可在settings中配置
STATIC_URL = '/static/'
STATICFILES_DIRS = [
os.path.join(BASE_DIR,'static')
]
设置全局变量 可以在settings中添加全局变量的函数位置
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'bookapp.global.global_setting',
            ],
        },
    },
]


不经过view直接由路由访问界面(系统中有自定义的view函数)
路由中引用
from django.views.generic.base import TemplateView
from django.views.generic.base import RedirectView
urlpatterns = [
url(r'^about/$',TemplateView.as_view(template_name = 'index.html')),
url(r'^redirect/$',RedirectView.as_view(url = 'http://www.baidu.com'))
]


搭建数据库:

在modles里面构建表
setting 里面配置

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'books',
        'USER':'root',
        'PASSWORD':'123456',
        'HOST':'',
        'PORT':''
    }
}
./manage.py makemigration
./manage.py migrate
./manage.py createsuperuser

check 检查django项目的完整性
compilemessages编译语言文件 本地化：用本地的字符编码
createcachetable 查看缓存
diffsettings查看本地与默认配置有何不同
dumpdata 导出数据
flush清空数据
inspectdb将数据库导出为模型文件
loaddata导入
makemessages 创建语言文件
showmigration 显示日志文件
sqlflush查看清空数据库脚本
sqlmigrate查看数据库语句


get filter
1django的get方法是从数据库的取得一个匹配的结果，返回一个对象，如果记录不存在的话，它会报错。
2如果你用django的get去取得关联表的数据的话，而关键表的数据如果多于2条的话也会报错。

1django的filter方法是从数据库的取得匹配的结果，返回一个对象列表，如果记录不存在的话，它会返回[]。
2如果你用django的get去取得关联表的数据的话，无论关联表有多少记录的都不会报错。


第一步setting
第二部写usr
3.同步
